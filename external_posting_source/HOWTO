How to build an external posting source with xapian
===================================================

It is now possible to write a Xapian::PostingSource subclass, compile it
separately from xapian (though linking to the main xapian library), and then to
wrap it in a separate python module and pass it to the core xapian library.
This allows you to develop and maintain your own posting source subclasses
without having to patch the xapian sources.

There are still a few rough ends, however; mainly to do with compiler options.

Requirements
------------

You will need access to the xapian-bindings sources.  Specifically, you will
need the ".i" files which are used by swig to wrap xapian (we may be able to
start installing them as part of the xapian install at some point, but for now
you need to get them from the source tree).  Note that some of these files are
generated by the build, so you should use a built source tree.

You will also need an appropriate version of swig.  The best one to use is the
same one used to generate your installation of xapian.  This can most easily be
obtained by a xapian SVN source checkout.  Other versions of swig may work, but
this has not been tested - xapian tends to use recently developed features of
SWIG.

Writing your posting source subclass
------------------------------------

The easiest way to do this is to start with the example "mypostingsource.h" in
this directory.  This contains a bit of code to tell SWIG what to do::

    #ifdef SWIG 
    %module mypostingsource
    %import xapian.i
    %{
    #include "xapian.h"
    namespace Xapian {
        void SetPythonException();
    }
    #include "mypostingsource.h"
    %}
    #endif

The #ifdef SWIG causes a normal C++ compiler to ignore this.  You should change
"mypostingsource" in the next line to the name you want to use for your python
module, and "mypostingsource.h" to the name of your source file.  Other than
that, just leave this block of code as it is.

Running swig
------------

Assuming you have swig on your path, and are in this directory in the xappy
sources, and have run the "get_xapian.py" script to obtain the latest xapian
packages (and have then compiled them in-place), the following swig command
will generate the appropriate libraries (replace mypostingsource.h with the
name of your source file, obviously)::

    swig -python -c++ -I../libs/xapian-bindings/ -I../libs/xapian-bindings/python/ -I../libs/xapian-core/include/ mypostingsource.h

Alternatively, if you did a VPATH build of xapian, to ../libs/build/xapian-core
and ../libs/build/xapian-bindings, use the following command::

    swig -python -c++ -I../libs/xapian-bindings/ -I../libs/xapian-bindings/python/ -I../libs/build/xapian-bindings/python/ -I../libs/build/xapian-core/include/ -I../libs/xapian-core/include/ mypostingsource.h

Compiling your posting source
-----------------------------

First, note that you need to install your build of xapian for the following
steps.  Usually you'd install to /usr or /usr/local.  Alternatively, you could
do a local install - in the following lines, we assume a local install to
../libs/install was done (this can be accomplished by configuring the
xapian-core package with the "--prefix=" option.

Compiling is fairly straightforward - use xapian-config to get the appropriate
options to pass to the compiler, and use libtool to match the compilation of
all the other files::

    libtool --mode=compile g++ `../libs/install/bin/xapian-config --cxxflags` -shared -I/usr/include/python2.5 mypostingsource.h -o mypostingsource.lo

Linking your posting source
---------------------------

Finally, you need to compile and link your posting source.  The important part
here is that you need to link with both the xapian library (for which you can
get the options from xapian-config), and the generated _xapian python module::

    libtool --mode=link g++ -shared -fno-strict-aliasing -Wall -Wno-unused -Wno-uninitialized -fvisibility=hidden -g -O2 -avoid-version -module -shrext ".so" -o _mypostingsource.la mypostingsource.lo

This will leave the generated file in the .libs subdirectory.

Alternatively, you might want to skip use of libtool and do the compile and link in one command:

    g++ `../libs/install/bin/xapian-config --cxxflags --libs` -I/usr/include/python2.5 -shared -o _mypostingsource.so mypostingsource.h mypostingsource_wrap.cxx ../libs/build/xapian-bindings/python/.libs/_xapian.so

